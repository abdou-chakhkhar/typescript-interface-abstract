{
  "version": 3,
  "sources": ["../LinkedList.ts"],
  "sourcesContent": ["import { Sorter } from \"./Sorter\";\n\nclass Node {\n  constructor(public data: number){};\n  next: Node | null = null;\n}\n\nexport class LinkedList extends Sorter {\n  head: Node | null = null;\n\n  add(data: number): void { \n    const node = new Node(data);\n    \n    if(!this.head){\n      this.head = node;\n      return;\n    }\n\n    let tail = this.head;\n    while(tail.next){\n      tail = tail.next;\n    }\n\n    tail.next = node;\n  }\n\n  get length(): number {\n    if(!this.head){\n      return 0;\n    }\n    let length = 1;\n    let node = this.head;\n    while(node.next){\n      length++;\n      node = node.next;\n    }\n    return length;\n  }\n\n  at(index: number): Node {\n    if(!this.head) throw new Error('Index out of bounds');\n\n    let counter = 0;\n\n    let node: Node | null = this.head;\n    while(node){\n      if(counter === index) return node;\n\n      counter++;\n      node = node.next;\n      \n    }\n\n    throw new Error('Index out of bounds');\n  }\n\n  compare(leftIndex: number, rightIndex: number): boolean {\n    if(!this.head) throw new Error('List is empty');\n    \n    return this.at(leftIndex).data > this.at(rightIndex).data;\n  }\n\n  swap(leftIndex: number, rightIndex: number): void {\n    \n    const leftNode = this.at(leftIndex);\n    const rightNode = this.at(rightIndex);\n\n    const leftHand = leftNode.data;\n    leftNode.data = rightNode.data;\n    rightNode.data = leftHand;\n  }\n\n  print(): void {\n    if(!this.head) return;\n\n    let node: Node | null = this.head;\n      while(node){\n        console.log(node.data);\n        node = node.next;\n      }\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,oBAAuB;AAEvB,WAAW;AAAA,EACT,YAAmB,MAAa;AAAb;AAAA;AAAA,EACnB,OAAoB;AAAA;AAGf,yBAAyB,qBAAO;AAAA,EACrC,OAAoB;AAAA,EAEpB,IAAI,MAAoB;AACtB,UAAM,OAAO,IAAI,KAAK;AAEtB,QAAG,CAAC,KAAK,MAAK;AACZ,WAAK,OAAO;AACZ;AAAA;AAGF,QAAI,OAAO,KAAK;AAChB,WAAM,KAAK,MAAK;AACd,aAAO,KAAK;AAAA;AAGd,SAAK,OAAO;AAAA;AAAA,MAGV,SAAiB;AACnB,QAAG,CAAC,KAAK,MAAK;AACZ,aAAO;AAAA;AAET,QAAI,SAAS;AACb,QAAI,OAAO,KAAK;AAChB,WAAM,KAAK,MAAK;AACd;AACA,aAAO,KAAK;AAAA;AAEd,WAAO;AAAA;AAAA,EAGT,GAAG,OAAqB;AACtB,QAAG,CAAC,KAAK;AAAM,YAAM,IAAI,MAAM;AAE/B,QAAI,UAAU;AAEd,QAAI,OAAoB,KAAK;AAC7B,WAAM,MAAK;AACT,UAAG,YAAY;AAAO,eAAO;AAE7B;AACA,aAAO,KAAK;AAAA;AAId,UAAM,IAAI,MAAM;AAAA;AAAA,EAGlB,QAAQ,WAAmB,YAA6B;AACtD,QAAG,CAAC,KAAK;AAAM,YAAM,IAAI,MAAM;AAE/B,WAAO,KAAK,GAAG,WAAW,OAAO,KAAK,GAAG,YAAY;AAAA;AAAA,EAGvD,KAAK,WAAmB,YAA0B;AAEhD,UAAM,WAAW,KAAK,GAAG;AACzB,UAAM,YAAY,KAAK,GAAG;AAE1B,UAAM,WAAW,SAAS;AAC1B,aAAS,OAAO,UAAU;AAC1B,cAAU,OAAO;AAAA;AAAA,EAGnB,QAAc;AACZ,QAAG,CAAC,KAAK;AAAM;AAEf,QAAI,OAAoB,KAAK;AAC3B,WAAM,MAAK;AACT,cAAQ,IAAI,KAAK;AACjB,aAAO,KAAK;AAAA;AAAA;AAAA;",
  "names": []
}
